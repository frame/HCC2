// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "msflexgrid.h"

// Dispatch interfaces referenced by this interface
#include "Font.h"
#include "Picture.h"
#include "rowcursor.h"
#include "Scheme.h"

#define CELL_DISABLED 0x00A08080

/////////////////////////////////////////////////////////////////////////////
// CMSFlexGrid

IMPLEMENT_DYNCREATE(CMSFlexGrid, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CMSFlexGrid properties

/////////////////////////////////////////////////////////////////////////////
// CMSFlexGrid operations

long CMSFlexGrid::GetRows()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetRows(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CMSFlexGrid::GetCols()
{
	long result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetCols(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CMSFlexGrid::GetFixedRows()
{
	long result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetFixedRows(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CMSFlexGrid::GetFixedCols()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetFixedCols(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CMSFlexGrid::GetVersion()
{
	short result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

CString CMSFlexGrid::GetFormatString()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetFormatString(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

long CMSFlexGrid::GetTopRow()
{
	long result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetTopRow(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CMSFlexGrid::GetLeftCol()
{
	long result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetLeftCol(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CMSFlexGrid::GetRow()
{
	long result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetRow(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CMSFlexGrid::GetCol()
{
	long result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetCol(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CMSFlexGrid::GetRowSel()
{
	long result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetRowSel(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CMSFlexGrid::GetColSel()
{
	long result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetColSel(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CString CMSFlexGrid::GetText()
{
	CString result;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetText(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

unsigned long CMSFlexGrid::GetBackColor()
{
	unsigned long result;
	InvokeHelper(DISPID_BACKCOLOR, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetBackColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(DISPID_BACKCOLOR, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

unsigned long CMSFlexGrid::GetForeColor()
{
	unsigned long result;
	InvokeHelper(DISPID_FORECOLOR, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetForeColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(DISPID_FORECOLOR, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

unsigned long CMSFlexGrid::GetBackColorFixed()
{
	unsigned long result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetBackColorFixed(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

unsigned long CMSFlexGrid::GetForeColorFixed()
{
	unsigned long result;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetForeColorFixed(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

unsigned long CMSFlexGrid::GetBackColorSel()
{
	unsigned long result;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetBackColorSel(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x10, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

unsigned long CMSFlexGrid::GetForeColorSel()
{
	unsigned long result;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetForeColorSel(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x11, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

unsigned long CMSFlexGrid::GetBackColorBkg()
{
	unsigned long result;
	InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetBackColorBkg(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x12, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL CMSFlexGrid::GetWordWrap()
{
	BOOL result;
	InvokeHelper(0x13, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetWordWrap(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x13, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

COleFont CMSFlexGrid::GetFont()
{
	LPDISPATCH pDispatch;
	InvokeHelper(DISPID_FONT, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return COleFont(pDispatch);
}

void CMSFlexGrid::SetRefFont(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(DISPID_FONT, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms,
		 newValue);
}

float CMSFlexGrid::GetFontWidth()
{
	float result;
	InvokeHelper(0x54, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetFontWidth(float newValue)
{
	static BYTE parms[] =
		VTS_R4;
	InvokeHelper(0x54, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

CString CMSFlexGrid::GetCellFontName()
{
	CString result;
	InvokeHelper(0x4d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetCellFontName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x4d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

float CMSFlexGrid::GetCellFontSize()
{
	float result;
	InvokeHelper(0x4e, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetCellFontSize(float newValue)
{
	static BYTE parms[] =
		VTS_R4;
	InvokeHelper(0x4e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL CMSFlexGrid::GetCellFontBold()
{
	BOOL result;
	InvokeHelper(0x4f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetCellFontBold(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CMSFlexGrid::GetCellFontItalic()
{
	BOOL result;
	InvokeHelper(0x50, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetCellFontItalic(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x50, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CMSFlexGrid::GetCellFontUnderline()
{
	BOOL result;
	InvokeHelper(0x51, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetCellFontUnderline(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x51, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CMSFlexGrid::GetCellFontStrikeThrough()
{
	BOOL result;
	InvokeHelper(0x52, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetCellFontStrikeThrough(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x52, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

float CMSFlexGrid::GetCellFontWidth()
{
	float result;
	InvokeHelper(0x53, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetCellFontWidth(float newValue)
{
	static BYTE parms[] =
		VTS_R4;
	InvokeHelper(0x53, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long CMSFlexGrid::GetTextStyle()
{
	long result;
	InvokeHelper(0x14, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetTextStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x14, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CMSFlexGrid::GetTextStyleFixed()
{
	long result;
	InvokeHelper(0x15, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetTextStyleFixed(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x15, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL CMSFlexGrid::GetScrollTrack()
{
	BOOL result;
	InvokeHelper(0x16, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetScrollTrack(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x16, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CMSFlexGrid::GetFocusRect()
{
	long result;
	InvokeHelper(0x17, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetFocusRect(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x17, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CMSFlexGrid::GetHighLight()
{
	long result;
	InvokeHelper(0x18, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetHighLight(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x18, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL CMSFlexGrid::GetRedraw()
{
	BOOL result;
	InvokeHelper(0x19, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetRedraw(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x19, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CMSFlexGrid::GetScrollBars()
{
	long result;
	InvokeHelper(0x1a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetScrollBars(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CMSFlexGrid::GetMouseRow()
{
	long result;
	InvokeHelper(0x1b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CMSFlexGrid::GetMouseCol()
{
	long result;
	InvokeHelper(0x1c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CMSFlexGrid::GetCellLeft()
{
	long result;
	InvokeHelper(0x1d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CMSFlexGrid::GetCellTop()
{
	long result;
	InvokeHelper(0x1e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CMSFlexGrid::GetCellWidth()
{
	long result;
	InvokeHelper(0x1f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CMSFlexGrid::GetCellHeight()
{
	long result;
	InvokeHelper(0x20, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CMSFlexGrid::GetRowHeightMin()
{
	long result;
	InvokeHelper(0x21, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetRowHeightMin(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x21, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CMSFlexGrid::GetFillStyle()
{
	long result;
	InvokeHelper(0xfffffe01, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetFillStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xfffffe01, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CMSFlexGrid::GetGridLines()
{
	long result;
	InvokeHelper(0x22, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetGridLines(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x22, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CMSFlexGrid::GetGridLinesFixed()
{
	long result;
	InvokeHelper(0x23, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetGridLinesFixed(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x23, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

unsigned long CMSFlexGrid::GetGridColor()
{
	unsigned long result;
	InvokeHelper(0x24, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetGridColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x24, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

unsigned long CMSFlexGrid::GetGridColorFixed()
{
	unsigned long result;
	InvokeHelper(0x25, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetGridColorFixed(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x25, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

unsigned long CMSFlexGrid::GetCellBackColor()
{
	unsigned long result;
	InvokeHelper(0x26, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetCellBackColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x26, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

unsigned long CMSFlexGrid::GetCellForeColor()
{
	unsigned long result;
	InvokeHelper(0x27, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetCellForeColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x27, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

short CMSFlexGrid::GetCellAlignment()
{
	short result;
	InvokeHelper(0x28, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetCellAlignment(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x28, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CMSFlexGrid::GetCellTextStyle()
{
	long result;
	InvokeHelper(0x29, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetCellTextStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x29, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CMSFlexGrid::GetCellPictureAlignment()
{
	short result;
	InvokeHelper(0x2b, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetCellPictureAlignment(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x2b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CString CMSFlexGrid::GetClip()
{
	CString result;
	InvokeHelper(0x2d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetClip(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void CMSFlexGrid::SetSort(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x2e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CMSFlexGrid::GetSelectionMode()
{
	long result;
	InvokeHelper(0x2f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetSelectionMode(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CMSFlexGrid::GetMergeCells()
{
	long result;
	InvokeHelper(0x30, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetMergeCells(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x30, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL CMSFlexGrid::GetAllowBigSelection()
{
	BOOL result;
	InvokeHelper(0x33, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetAllowBigSelection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x33, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CMSFlexGrid::GetAllowUserResizing()
{
	long result;
	InvokeHelper(0x34, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetAllowUserResizing(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x34, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CMSFlexGrid::GetBorderStyle()
{
	long result;
	InvokeHelper(DISPID_BORDERSTYLE, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetBorderStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(DISPID_BORDERSTYLE, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CMSFlexGrid::GetHWnd()
{
	long result;
	InvokeHelper(DISPID_HWND, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL CMSFlexGrid::GetEnabled()
{
	BOOL result;
	InvokeHelper(DISPID_ENABLED, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetEnabled(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(DISPID_ENABLED, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CMSFlexGrid::GetAppearance()
{
	long result;
	InvokeHelper(DISPID_APPEARANCE, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetAppearance(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(DISPID_APPEARANCE, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CMSFlexGrid::GetMousePointer()
{
	long result;
	InvokeHelper(0x35, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetMousePointer(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x35, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CPicture CMSFlexGrid::GetMouseIcon()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x36, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPicture(pDispatch);
}

void CMSFlexGrid::SetRefMouseIcon(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x36, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms,
		 newValue);
}

long CMSFlexGrid::GetPictureType()
{
	long result;
	InvokeHelper(0x32, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetPictureType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x32, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CPicture CMSFlexGrid::GetPicture()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x31, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPicture(pDispatch);
}

CPicture CMSFlexGrid::GetCellPicture()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x2a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPicture(pDispatch);
}

void CMSFlexGrid::SetRefCellPicture(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2a, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms,
		 newValue);
}

CString CMSFlexGrid::GetTextArray(long index)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x37, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		index);
	return result;
}

void CMSFlexGrid::SetTextArray(long index, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x37, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, lpszNewValue);
}

short CMSFlexGrid::GetColAlignment(long index)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x38, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		index);
	return result;
}

void CMSFlexGrid::SetColAlignment(long index, short nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x38, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, nNewValue);
}

long CMSFlexGrid::GetColWidth(long index)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x39, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		index);
	return result;
}

void CMSFlexGrid::SetColWidth(long index, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x39, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, nNewValue);
}

long CMSFlexGrid::GetRowHeight(long index)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		index);
	return result;
}

void CMSFlexGrid::SetRowHeight(long index, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x3a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, nNewValue);
}

BOOL CMSFlexGrid::GetMergeRow(long index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		index);
	return result;
}

void CMSFlexGrid::SetMergeRow(long index, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x3b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, bNewValue);
}

BOOL CMSFlexGrid::GetMergeCol(long index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		index);
	return result;
}

void CMSFlexGrid::SetMergeCol(long index, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x3c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, bNewValue);
}

void CMSFlexGrid::SetRowPosition(long index, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x3d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, nNewValue);
}

void CMSFlexGrid::SetColPosition(long index, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x3e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, nNewValue);
}

long CMSFlexGrid::GetRowData(long index)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		index);
	return result;
}

void CMSFlexGrid::SetRowData(long index, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x3f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, nNewValue);
}

long CMSFlexGrid::GetColData(long index)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x40, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		index);
	return result;
}

void CMSFlexGrid::SetColData(long index, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x40, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, nNewValue);
}

CString CMSFlexGrid::GetTextMatrix(long Row, long Col)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x41, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		Row, Col);
	return result;
}

void CMSFlexGrid::SetTextMatrix(long Row, long Col, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BSTR;
	InvokeHelper(0x41, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Row, Col, lpszNewValue);
}

void CMSFlexGrid::AddItem(LPCTSTR Item, const VARIANT& index)
{
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x42, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Item, &index);
}

void CMSFlexGrid::RemoveItem(long index)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x43, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 index);
}

void CMSFlexGrid::Clear()
{
	InvokeHelper(0x44, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CMSFlexGrid::Refresh()
{
	InvokeHelper(DISPID_REFRESH, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CRowCursor CMSFlexGrid::GetDataSource()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x4c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CRowCursor(pDispatch);
}

void CMSFlexGrid::SetDataSource(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL CMSFlexGrid::GetRowIsVisible(long index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x55, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		index);
	return result;
}

BOOL CMSFlexGrid::GetColIsVisible(long index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x56, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		index);
	return result;
}

long CMSFlexGrid::GetRowPos(long index)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x57, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		index);
	return result;
}

long CMSFlexGrid::GetColPos(long index)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x58, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		index);
	return result;
}

short CMSFlexGrid::GetGridLineWidth()
{
	short result;
	InvokeHelper(0x59, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetGridLineWidth(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x59, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CMSFlexGrid::GetFixedAlignment(long index)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5a, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		index);
	return result;
}

void CMSFlexGrid::SetFixedAlignment(long index, short nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x5a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, nNewValue);
}

BOOL CMSFlexGrid::GetRightToLeft()
{
	BOOL result;
	InvokeHelper(0xfffffd9d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetRightToLeft(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xfffffd9d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CMSFlexGrid::GetOLEDropMode()
{
	long result;
	InvokeHelper(0x60f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSFlexGrid::SetOLEDropMode(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x60f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void CMSFlexGrid::OLEDrag()
{
	InvokeHelper(0x610, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CMSFlexGrid::AddTitleRow(CString a_csMsg, int a_iStyle, CEdit *a_cSizingBox)
{
	int l_iRows = 1;

	a_cSizingBox->SetWindowText (a_csMsg);
	l_iRows = a_cSizingBox->GetLineCount ();
	AddRow (a_csMsg + "\t" + a_csMsg, a_iStyle, l_iRows);
}

CMSFlexGrid::AddRow(CString a_csMsg, int a_iStyle, CEdit *a_cSizingBox)
{
	int l_iRows = 1;
	int l_iOffset;
	CString l_csStr;

	l_iOffset = a_csMsg.Find ("|");
	l_csStr = a_csMsg.Mid (l_iOffset + 1);

	a_cSizingBox->SetWindowText (l_csStr);
	l_iRows = a_cSizingBox->GetLineCount ();
	AddRow (a_csMsg, a_iStyle, l_iRows);
}

CMSFlexGrid::AddRow(CString a_csMsg, int a_iStyle, int a_iRows)
{
	VARIANT l_cSVariant;
	l_cSVariant.vt = VT_I4;
	CString l_csParsedMsg = a_csMsg;

	l_csParsedMsg.Replace ("|", "\t");
	l_cSVariant.intVal = GetRows ();

	AddItem (l_csParsedMsg, l_cSVariant);

	switch (a_iStyle)
	{
		case (GRID_TITLE) :
		{
			SetRow (l_cSVariant.intVal);
			SetCol (0);
			SetMergeRow (l_cSVariant.intVal, true);
			SetTextMatrix (l_cSVariant.intVal, 0, GetTextMatrix (l_cSVariant.intVal, 1));
			SetCellAlignment (4);
			SetCellFontBold (true);
			SetCellForeColor (CScheme::GetColour("GRID_TITLE_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_TITLE_BG"));
			SetCol (1);
			SetCellFontBold (true);
			SetCellForeColor (CScheme::GetColour("GRID_TITLE_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_TITLE_BG"));
			break;
		}
		case (GRID_EFFECTTITLE) :
		{
			SetRow (l_cSVariant.intVal);
			SetCol (0);
			SetMergeRow (l_cSVariant.intVal, true);
			SetTextMatrix (l_cSVariant.intVal, 0, GetTextMatrix (l_cSVariant.intVal, 1));
			SetCellAlignment (4);
			SetCellFontBold (true);
			SetCellForeColor (CScheme::GetColour("GRID_EFFECTTITLE_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_EFFECTTITLE_BG"));
			SetCol (1);
			SetCellFontBold (true);
			SetCellForeColor (CScheme::GetColour("GRID_EFFECTTITLE_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_EFFECTTITLE_BG"));
			break;
		}
		case (GRID_MINORTITLE) :
		{
			SetRow (l_cSVariant.intVal);
			SetCol (0);
			SetCellAlignment (6);
			SetCellFontBold (true);
			SetCellForeColor (CScheme::GetColour("GRID_MINORTITLE_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_MINORTITLE_BG"));
			SetCol (1);
			SetCellFontBold (true);
			SetCellForeColor (CScheme::GetColour("GRID_MINORTITLE_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_MINORTITLE_BG"));
			SetCol (0);
			SetMergeRow (l_cSVariant.intVal, true);
			SetCellAlignment (4);
			break;
		}
		case (GRID_BONUS) :
		{
			SetRow (l_cSVariant.intVal);
			SetCol (0);
			SetCellAlignment (6);
			SetCellForeColor (CScheme::GetColour("GRID_BONUS_HDR_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_BONUS_BG"));
			SetCol (1);
			SetCellForeColor (CScheme::GetColour("GRID_BONUS_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_BONUS_BG"));
			break;
		}
		case (GRID_EFFECT) :
		{
			SetRow (l_cSVariant.intVal);
			SetCol (0);
			SetCellAlignment (6);
			SetCellForeColor (CScheme::GetColour("GRID_EFFECT_HDR_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_EFFECT_BG"));
			SetCol (1);
			SetCellForeColor (0x00804040);
			SetCellForeColor (CScheme::GetColour("GRID_EFFECT_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_EFFECT_BG"));
			break;
		}
		case (GRID_REQUIREMENT) :
		{
			SetRow (l_cSVariant.intVal);
			SetCol (0);
			SetCellAlignment (6);
			SetCellForeColor (CScheme::GetColour("GRID_REQUIREMENT_HDR_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_REQUIREMENT_BG"));
			SetCol (1);
			SetCellForeColor (CScheme::GetColour("GRID_REQUIREMENT_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_REQUIREMENT_BG"));
			break;
		}
		case (GRID_DESCRIPTION) :
		{
			SetRow (l_cSVariant.intVal);
			SetCol (0);
			SetCellAlignment (6);
			SetCellForeColor (CScheme::GetColour("GRID_DESCRIPTION_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_DESCRIPTION_BG"));
			SetCol (1);
			SetCellForeColor (CScheme::GetColour("GRID_DESCRIPTION_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_DESCRIPTION_BG"));
			SetCol (0);
			SetMergeRow (l_cSVariant.intVal, true);
			SetTextMatrix (l_cSVariant.intVal, 0, GetTextMatrix (l_cSVariant.intVal, 1));
			SetCellAlignment (4);
			break;
		}
		case (GRID_EFFECTDESCRIPTION) :
		{
			SetRow (l_cSVariant.intVal);
			SetCol (0);
			SetCellAlignment (6);
			SetCellForeColor (CScheme::GetColour("GRID_EFFECTDESCRIPTION_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_EFFECTDESCRIPTION_BG"));
			SetCol (1);
			SetCellForeColor (CScheme::GetColour("GRID_EFFECTDESCRIPTION_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_EFFECTDESCRIPTION_BG"));
			SetCol (0);
			SetMergeRow (l_cSVariant.intVal, true);
			SetTextMatrix (l_cSVariant.intVal, 0, GetTextMatrix (l_cSVariant.intVal, 1));
			SetCellAlignment (4);
			break;
		}
		case (GRID_RESOURCE) :
		{
			SetRow (l_cSVariant.intVal);
			SetCol (0);
			SetCellAlignment (1);
			SetCellForeColor (CScheme::GetColour("GRID_RESOURCE_NAME_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_RESOURCE_NAME_BG"));
			SetCol (1);
			SetCellForeColor (CScheme::GetColour("GRID_RESOURCE_EFF_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_RESOURCE_EFF_BG"));
			SetCol (2);
			SetCellForeColor (CScheme::GetColour("GRID_RESOURCE_NEED_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_RESOURCE_NEED_BG"));
			SetCol (3);
			SetCellForeColor (CScheme::GetColour("GRID_RESOURCE_SKILL_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_RESOURCE_SKILL_BG"));
			SetCol (4);
			SetCellForeColor (CScheme::GetColour("GRID_RESOURCE_MIN_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_RESOURCE_MIN_BG"));
			SetCol (5);
			SetCellForeColor (CScheme::GetColour("GRID_RESOURCE_OPT_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_RESOURCE_OPT_BG"));
			SetCol (6);
			SetCellForeColor (CScheme::GetColour("GRID_RESOURCE_CURSKILL_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_RESOURCE_CURSKILL_BG"));
			break;
		}
		case (GRID_COMPONENT) :
		{
			SetRow (l_cSVariant.intVal);
			SetCol (0);
			SetCellAlignment (1);
			SetCellForeColor (CScheme::GetColour("GRID_TECH_COMPONENT_NAME_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_TECH_COMPONENT_NAME_BG"));
			SetCol (1);
			SetCellForeColor (CScheme::GetColour("GRID_TECH_COMPONENT_AMT_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_TECH_COMPONENT_AMT_BG"));
			break;
		}
		case (GRID_SKILL) :
		{
			SetRow (l_cSVariant.intVal);
			SetCol (0);
			SetCellForeColor (CScheme::GetColour("GRID_TECH_COMPONENT_NAME_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_TECH_COMPONENT_NAME_BG"));
			SetCol (1);
			SetCellForeColor (CScheme::GetColour("GRID_TECH_COMPONENT_AMT_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_TECH_COMPONENT_AMT_BG"));
			break;
		}
		case (GRID_TECHLIST) :
		{
			SetRow (l_cSVariant.intVal);
			SetCol (0);
			SetCellForeColor (CScheme::GetColour("GRID_TECHLIST_COL1_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_TECHLIST_COL1_BG"));
			SetCellAlignment (7);
			SetCol (1);
			SetCellForeColor (CScheme::GetColour("GRID_TECHLIST_COL2_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_TECHLIST_COL2_BG"));
			SetCellFontBold (true);
			break;
		}
		case (GRID_TIERAVAIL) :
		{
			SetRow (l_cSVariant.intVal);
			SetCol (0);
			SetCellForeColor (CScheme::GetColour("GRID_TIERAVAIL_FG"));
			break;
		}
		case (GRID_TIERNOTAVAIL) :
		{
			SetRow (l_cSVariant.intVal);
			SetCol (0);
			SetCellForeColor (CScheme::GetColour("GRID_TIERNOTAVAIL_FG"));
			break;
		}
		case (GRID_TECH) :
		{
			SetRow (l_cSVariant.intVal);
			SetCol (0);
			SetCellForeColor (CScheme::GetColour("GRID_TECH_FG"));
			break;
		}
		case (GRID_REPORTTITLE) :
		{
			SetRow (l_cSVariant.intVal);
			SetCol (0);
			SetCellFontBold (true);
			SetCellForeColor (CScheme::GetColour("GRID_REPORTTITLE_COL1_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_REPORTTITLE_COL1_BG"));
			SetCol (1);
			SetCellFontBold (true);
			SetCellAlignment (4);
			SetCellForeColor (CScheme::GetColour("GRID_REPORTTITLE_COL2_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_REPORTTITLE_COL2_BG"));
			SetCol (2);
			SetCellFontBold (true);
			SetCellAlignment (4);
			SetCellForeColor (CScheme::GetColour("GRID_REPORTTITLE_COL3_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_REPORTTITLE_COL3_BG"));
			break;
		}
		case (GRID_REPORT1) :
		{
			SetRow (l_cSVariant.intVal);
			SetCol (0);
			SetCellForeColor (CScheme::GetColour("GRID_REPORT1_COL1_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_REPORT1_COL1_BG"));
			SetCol (1);
			SetCellAlignment (4);
			SetCellForeColor (CScheme::GetColour("GRID_REPORT1_COL2_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_REPORT1_COL2_BG"));
			SetCol (2);
			SetCellAlignment (4);
			SetCellForeColor (CScheme::GetColour("GRID_REPORT1_COL3_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_REPORT1_COL3_BG"));
			break;
		}
		case (GRID_REPORT2) :
		{
			SetRow (l_cSVariant.intVal);
			SetCol (0);
			SetCellForeColor (CScheme::GetColour("GRID_REPORT2_COL1_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_REPORT2_COL1_BG"));
			SetCol (1);
			SetCellAlignment (4);
			SetCellForeColor (CScheme::GetColour("GRID_REPORT2_COL2_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_REPORT2_COL2_BG"));
			SetCol (2);
			SetCellAlignment (4);
			SetCellForeColor (CScheme::GetColour("GRID_REPORT2_COL3_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_REPORT2_COL3_BG"));
			break;
		}
		case (GRID_SUBRESOURCE) :
		{
			SetRow (l_cSVariant.intVal);
			SetCol (0);
			SetCellAlignment (0);
			SetCellForeColor (CScheme::GetColour("GRID_REPORT_SUB_COL1_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_REPORT_SUB_COL1_BG"));
			SetCol (1);
			SetCellAlignment (4);
			SetCellForeColor (CScheme::GetColour("GRID_REPORT_SUB_COL2_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_REPORT_SUB_COL2_BG"));
			SetCol (2);
			SetCellAlignment (4);
			SetCellForeColor (CScheme::GetColour("GRID_REPORT_SUB_COL3_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_REPORT_SUB_COL3_BG"));
			break;
		}
		case (GRID_BLANK) :
		{
			SetRow (l_cSVariant.intVal);
			SetCol (0);
			SetCellForeColor (CScheme::GetColour("GRID_REPORT_BLANK_COL1_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_REPORT_BLANK_COL1_BG"));
			SetCol (1);
			SetCellForeColor (CScheme::GetColour("GRID_REPORT_BLANK_COL2_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_REPORT_BLANK_COL2_BG"));
			SetCol (2);
			SetCellForeColor (CScheme::GetColour("GRID_REPORT_BLANK_COL3_FG"));
			SetCellBackColor (CScheme::GetColour("GRID_REPORT_BLANK_COL3_BG"));
			break;
		}
	}

	if (a_iRows > 1)
	{
		SetRow (l_cSVariant.intVal);
		SetRowHeight (l_cSVariant.intVal, (a_iRows * GetRowHeight (0)));
	}
}


CMSFlexGrid::SelectRow(int a_iRow, bool IgnoreFirst)
{
	if (a_iRow < 0)
	{
		a_iRow = 0;
	}
	else if (a_iRow >= GetRows ())
	{
		a_iRow = GetRows() - 1;
	}

	SetRow (a_iRow);

	if (IgnoreFirst)
	{
		SetCol (1);
	}
	else
	{
		SetCol (0);
	}

	SetColSel (GetCols () - 1);
	SetRowSel (a_iRow);

	if (!GetRowIsVisible (a_iRow))
	{
		SetTopRow (a_iRow);
	}
}

int CMSFlexGrid::FindRow(CString &a_csRowName, int a_iCol)
{
	int l_iOffset = 0;

	while (l_iOffset < GetRows())
	{
		if (GetTextMatrix (l_iOffset, a_iCol) == a_csRowName)
		{
			return (l_iOffset);
		}
		
		l_iOffset++;
	}

	return (-1);
}

bool CMSFlexGrid::IsRowEnabled(int a_iRow)
{
	int l_iCurRow = GetRowSel ();
	unsigned long l_iColor;

	this->EnableWindow (false);

	SetRowSel (a_iRow);
	SetCol (0);
	l_iColor = GetCellForeColor ();

	SetRow (l_iCurRow);
	SetCol (0);
	SetColSel (GetCols () - 1);
	SetRowSel (l_iCurRow);
	this->EnableWindow (true);

	return (l_iColor != CScheme::GetColour("GRID_TIERNOTAVAIL_FG"));
}

BOOL CMSFlexGrid::OnEraseBkgnd(CDC* pDC)
{
   return FALSE;
}

CRect CMSFlexGrid::GetCellRect(int a_iRow, int a_iCol)
{
	long left,top,w,h;
	CRect r_window,r_rectedit;

	SetRow (a_iRow);
	SetCol(a_iCol);
	
	DeterminePixelsPerInch ();
	GetWindowRect(&r_window);
	GetParent()->ScreenToClient(&r_window);
	
	left=GetCellLeft() - 10;
	top=GetCellTop() - 20;
	w=GetCellWidth() - 20;
	h=GetCellHeight() + 40;
		
	r_rectedit.SetRect((int)(r_window.left+(left)*m_pixelsperinchx/1440),(int)(r_window.top+(top+15)*m_pixelsperinchy/1440),
				(int)(r_window.left+(left+w)*m_pixelsperinchx/1440),(int)(r_window.top+(top+h)*m_pixelsperinchy/1440));
		

	return (r_rectedit);
}

CMSFlexGrid::DeterminePixelsPerInch()
{
	CClientDC dc(this);
	m_pixelsperinchx=dc.GetDeviceCaps(LOGPIXELSX);
	m_pixelsperinchy=dc.GetDeviceCaps(LOGPIXELSY);
}

int CMSFlexGrid::GetGridMinHeight(int a_iMinRows, int a_iMaxRows, int a_iDefaultRows)
{
	int l_iResize = GetRows() - a_iDefaultRows;

	if (l_iResize < a_iMinRows)
	{
		l_iResize = a_iMinRows;
	}

	if (l_iResize > a_iMaxRows)
	{
		l_iResize = a_iMaxRows;
	}

	return (l_iResize * GetRowHeight (0));

}
